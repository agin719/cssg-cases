CosXmlServiceConfig serviceConfig = new CosXmlServiceConfig.Builder()
       .isHttps(true) // 设置 Https 请求
       .setRegion("ap-guangzhou") // 设置默认的存储桶地域
       .builder();

// 构建一个从临时密钥服务器拉取临时密钥的 Http 请求
HttpRequest<String> httpRequest = null;
try {
   httpRequest = new HttpRequest.Builder<String>()
           .url(new URL("your_auth_server_url"))
           .build();
} catch (MalformedURLException e) {
   e.printStackTrace();
}
QCloudCredentialProvider credentialProvider = new SessionCredentialProvider(httpRequest);
CosXmlService cosXmlService = new CosXmlService(context, serviceConfig, credentialProvider);

GetServiceRequest getServiceRequest = new GetServiceRequest();
//设置签名校验Host, 默认校验所有Header
Set<String> headerKeys = new HashSet<>();
headerKeys.add("Host");
getServiceRequest.setSignParamsAndHeaders(null, headerKeys);
// 使用同步方法
try {
    GetServiceResult result = cosXmlService.getService(getServiceRequest);
} catch (CosXmlClientException e) {
    e.printStackTrace();
} catch (CosXmlServiceException e) {
    e.printStackTrace();
}

// 使用异步回调请求
cosXmlService.getServiceAsync(getServiceRequest, new CosXmlResultListener() {
    @Override
    public void onSuccess(CosXmlRequest request, CosXmlResult result) {
        // todo Put Bucket Lifecycle success
  GetServiceResult getServiceResult = (GetServiceResult)result;
    }

    @Override
    public void onFail(CosXmlRequest cosXmlRequest, CosXmlClientException clientException, CosXmlServiceException serviceException)  {
        // todo Put Bucket Lifecycle failed because of CosXmlClientException or CosXmlServiceException...
    }
});
