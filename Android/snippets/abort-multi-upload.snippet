CosXmlServiceConfig serviceConfig = new CosXmlServiceConfig.Builder()
       .isHttps(true) // 设置 Https 请求
       .setRegion("ap-guangzhou") // 设置默认的存储桶地域
       .builder();

// 构建一个从临时密钥服务器拉取临时密钥的 Http 请求
HttpRequest<String> httpRequest = null;
try {
   httpRequest = new HttpRequest.Builder<String>()
           .url(new URL("your_auth_server_url"))
           .build();
} catch (MalformedURLException e) {
   e.printStackTrace();
}
QCloudCredentialProvider credentialProvider = new SessionCredentialProvider(httpRequest);
CosXmlService cosXmlService = new CosXmlService(context, serviceConfig, credentialProvider);

String bucket = "example-1250000000"; //格式：BucketName-APPID
String cosPath = "exampleobject"; //对象在存储桶中的位置标识符，即对象键。 如 cosPath = "text.txt";
String uploadId = "example-uploadId";

AbortMultiUploadRequest abortMultiUploadRequest = new AbortMultiUploadRequest(bucket, cosPath, uploadId);
//设置签名校验Host, 默认校验所有Header
Set<String> headerKeys = new HashSet<>();
headerKeys.add("Host");
abortMultiUploadRequest.setSignParamsAndHeaders(null, headerKeys);
// 使用同步方法请求
try {
    AbortMultiUploadResult abortMultiUploadResult = cosXmlService.abortMultiUpload(abortMultiUploadRequest);
} catch (CosXmlClientException e) {
    e.printStackTrace();
} catch (CosXmlServiceException e) {
    e.printStackTrace();
    //
}

// 使用异步回调请求
cosXmlService.abortMultiUploadAsync(abortMultiUploadRequest, new CosXmlResultListener() {
    @Override
    public void onSuccess(CosXmlRequest cosXmlRequest, CosXmlResult result) {
        // todo Abort Multi Upload success...
  AbortMultiUploadResult abortMultiUploadResult = (AbortMultiUploadResult)result;
    }

    @Override
    public void onFail(CosXmlRequest cosXmlRequest, CosXmlClientException clientException, CosXmlServiceException serviceException)  {
        // todo Abort Multi Upload failed because of CosXmlClientException or CosXmlServiceException...
    }
});

